{
    "Java Singleton Pattern": {
        "prefix": "my_singleton",
        "body": [
            "public class ${TM_FILENAME_BASE} {",
            "    private static ${TM_FILENAME_BASE} current;",
            "",
            "    public static ${TM_FILENAME_BASE} getInstance() {",
            "        if (current == null) {",
            "            current = new ${TM_FILENAME_BASE}();",
            "        }",
            "",
            "        return current;",
            "    }",
            "",
            "    private ${TM_FILENAME_BASE}() {",
            "        super();",
            "    }",
            "",
            "    $1",
            "}"
        ],
        "description": "Java Singleton Pattern"
    },
    "Model class initialize": {
        "prefix": "my_model",
        "body": [
            "package $1.models;",
            "",
            "import lombok.Data;",
            "import lombok.Getter;",
            "import lombok.Setter;",
            "",
            "@Data",
            "public class ${TM_FILENAME_BASE} {",
            "    private int id;",
            "    ",
            "    // TODO : Add more fields",
            "    $2",
            "",
            "    private String regDate;",
            "    private String editDate;",
            "",
            "    @Getter",
            "    @Setter",
            "    private static int listCount = 0;",
            "",
            "    @Getter",
            "    @Setter",
            "    private static int offset = 0;",
            "}"
        ],
        "description": "모델 클래스 기본 구성"
    },
    "MyBatis Mapper Generator": {
        "prefix": "my_mapper",
        "body": [
            "package ${1:[프로그램 패키지_이름]}.mappers;",
            "",
            "import java.util.List;",
            "",
            "import org.apache.ibatis.annotations.Delete;",
            "import org.apache.ibatis.annotations.Insert;",
            "import org.apache.ibatis.annotations.Mapper;",
            "import org.apache.ibatis.annotations.Options;",
            "import org.apache.ibatis.annotations.Result;",
            "import org.apache.ibatis.annotations.ResultMap;",
            "import org.apache.ibatis.annotations.Results;",
            "import org.apache.ibatis.annotations.Select;",
            "import org.apache.ibatis.annotations.Update;",
            "",
            "import ${1:[프로그램 패키지_이름]}.models.${TM_FILENAME_BASE/(Mapper)//};",
            "",
            "@Mapper",
            "public interface ${TM_FILENAME_BASE} {",
            "    @Insert(\"...\")",
            "    @Options(useGeneratedKeys = true, keyProperty = \"...\", keyColumn = \"...\")",
            "    public int insert(${TM_FILENAME_BASE/(Mapper)//} input);",
            "",
            "    @Update(\"...\")",
            "    public int update(${TM_FILENAME_BASE/(Mapper)//} input);",
            "",
            "    @Delete(\"...\")",
            "    public int delete(${TM_FILENAME_BASE/(Mapper)//} input);",
            "",
            "    @Select(\"...\")",
            "    @Results(id=\"resultMap\", value={",
            "        @Result(property=\"...\", column=\"...\"),",
            "        @Result(property=\"...\", column=\"...\"),",
            "        @Result(property=\"...\", column=\"...\")",
            "    })",
            "    public ${TM_FILENAME_BASE/(Mapper)//} selectItem(${TM_FILENAME_BASE/(Mapper)//} input);",
            "",
            "    @Select(\"...\")",
            "    @ResultMap(\"resultMap\")",
            "    public List<${TM_FILENAME_BASE/(Mapper)//}> selectList(${TM_FILENAME_BASE/(Mapper)//} input);",
            "",
            "    @Select(\"...\")",
            "    public int selectCount(${TM_FILENAME_BASE/(Mapper)//} input);",
            "}",
            ""
        ],
        "description": "MyBatis Mapper Generator"
    },
    "Service Layer Generator": {
        "prefix": "my_service",
        "body": [
            "package ${1:[프로그램 패키지_이름]}.services;",
            "",
            "import java.util.List;",
            "",
            "import ${1:[프로그램 패키지_이름]}.models.${TM_FILENAME_BASE/(Service)//};",
            "",
            "public interface ${TM_FILENAME_BASE} {",
            "    public ${TM_FILENAME_BASE/(Service)//} addItem(${TM_FILENAME_BASE/(Service)//} params) throws Exception;",
            "",
            "    public ${TM_FILENAME_BASE/(Service)//} editItem(${TM_FILENAME_BASE/(Service)//} params) throws Exception;",
            "",
            "    public int deleteItem(${TM_FILENAME_BASE/(Service)//} params) throws Exception;",
            "",
            "    public ${TM_FILENAME_BASE/(Service)//} getItem(${TM_FILENAME_BASE/(Service)//} params) throws Exception;",
            "",
            "    public List<${TM_FILENAME_BASE/(Service)//}> getList(${TM_FILENAME_BASE/(Service)//} params) throws Exception;",
            "",
            "    public int getCount(${TM_FILENAME_BASE/(Service)//} params) throws Exception;",
            "}",
            ""
        ],
        "description": "Service Layer Generator",
    },
    "Service Layer Implement Generator": {
        "prefix": "my_service_impl",
        "body": [
            "package ${2:[프로그램 패키지_이름]}.services.impl;",
            "",
            "import java.util.List;",
            "",
            "import org.springframework.beans.factory.annotation.Autowired;",
            "import org.springframework.stereotype.Service;",
            "",
            "import ${2:[프로그램_패키지_이름]}.mappers.${TM_FILENAME_BASE/(ServiceImpl)//}Mapper;",
            "import ${2:[프로그램_패키지_이름]}.models.${TM_FILENAME_BASE/(ServiceImpl)//};",
            "import ${2:[프로그램_패키지_이름]}.services.${TM_FILENAME_BASE/(ServiceImpl)//}Service;",
            "import lombok.extern.slf4j.Slf4j;",
            "",
            "@Slf4j",
            "@Service",
            "public class ${TM_FILENAME_BASE} implements ${TM_FILENAME_BASE/(Impl)//} {",
            "",
            "    @Autowired",
            "    private ${TM_FILENAME_BASE/(ServiceImpl)//}Mapper ${TM_FILENAME_BASE/^(.*)ServiceImpl$/${1:/camelcase}/}Mapper;",
            "",
            "    @Override",
            "    public ${TM_FILENAME_BASE/(ServiceImpl)//} addItem(${TM_FILENAME_BASE/(ServiceImpl)//} input) throws Exception {",
            "        int rows = 0;",
            "",
            "        try {",
            "            rows = ${TM_FILENAME_BASE/^(.*)ServiceImpl$/${1:/camelcase}/}Mapper.insert(input);",
            "",
            "            if (rows == 0) {",
            "                throw new Exception(\"저장된 데이터가 없습니다.\");",
            "            }",
            "        } catch (Exception e) {",
            "            log.error(\"데이터 저장에 실패했습니다.\", e);",
            "            throw e;",
            "        }",
            "",
            "        return ${TM_FILENAME_BASE/^(.*)ServiceImpl$/${1:/camelcase}/}Mapper.selectItem(input);",
            "    }",
            "",
            "    @Override",
            "    public ${TM_FILENAME_BASE/(ServiceImpl)//} editItem(${TM_FILENAME_BASE/(ServiceImpl)//} input) throws Exception {",
            "        int rows = 0;",
            "",
            "        try {",
            "            rows = ${TM_FILENAME_BASE/^(.*)ServiceImpl$/${1:/camelcase}/}Mapper.update(input);",
            "",
            "            if (rows == 0) {",
            "                throw new Exception(\"수정된 데이터가 없습니다.\");",
            "            }",
            "        } catch (Exception e) {",
            "            log.error(\"데이터 수정에 실패했습니다.\", e);",
            "            throw e;",
            "        }",
            "",
            "        return ${TM_FILENAME_BASE/^(.*)ServiceImpl$/${1:/camelcase}/}Mapper.selectItem(input);",
            "    }",
            "",
            "    @Override",
            "    public int deleteItem(${TM_FILENAME_BASE/(ServiceImpl)//} input) throws Exception {",
            "        int rows = 0;",
            "",
            "        try {",
            "            rows = ${TM_FILENAME_BASE/^(.*)ServiceImpl$/${1:/camelcase}/}Mapper.delete(input);",
            "",
            "            if (rows == 0) {",
            "                throw new Exception(\"삭제된 데이터가 없습니다.\");",
            "            }",
            "        } catch (Exception e) {",
            "            log.error(\"데이터 삭제에 실패했습니다.\", e);",
            "            throw e;",
            "        }",
            "",
            "        return rows;",
            "    }",
            "",
            "    @Override",
            "    public ${TM_FILENAME_BASE/(ServiceImpl)//} getItem(${TM_FILENAME_BASE/(ServiceImpl)//} input) throws Exception {",
            "        ${TM_FILENAME_BASE/(ServiceImpl)//} output = null;",
            "",
            "        try {",
            "            output = ${TM_FILENAME_BASE/^(.*)ServiceImpl$/${1:/camelcase}/}Mapper.selectItem(input);",
            "",
            "            if (output == null) {",
            "                throw new Exception(\"조회된 데이터가 없습니다.\");",
            "            }",
            "        } catch (Exception e) {",
            "            log.error(\"교수 조회에 실패했습니다.\", e);",
            "            throw e;",
            "        }",
            "",
            "        return output;",
            "    }",
            "",
            "    @Override",
            "    public List<${TM_FILENAME_BASE/(ServiceImpl)//}> getList(${TM_FILENAME_BASE/(ServiceImpl)//} input) throws Exception {",
            "        List<${TM_FILENAME_BASE/(ServiceImpl)//}> output = null;",
            "",
            "        try {",
            "            output = ${TM_FILENAME_BASE/^(.*)ServiceImpl$/${1:/camelcase}/}Mapper.selectList(input);",
            "        } catch (Exception e) {",
            "            log.error(\"교수 목록 조회에 실패했습니다.\", e);",
            "            throw e;",
            "        }",
            "",
            "        return output;",
            "    }",
            "",
            "    @Override",
            "    public int getCount(${TM_FILENAME_BASE/(ServiceImpl)//} input) throws Exception {",
            "        int output = 0;",
            "",
            "        try {",
            "            output = ${TM_FILENAME_BASE/^(.*)ServiceImpl$/${1:/camelcase}/}Mapper.selectCount(input);",
            "        } catch (Exception e) {",
            "            log.error(\"데이터 집계에 실패했습니다.\", e);",
            "            throw e;",
            "        }",
            "",
            "        return output;",
            "    }",
            "}"
        ],
        "description": "Service Layer Implement Generator"
    }
}